@page "/statistic"
@inject IOrderService orderService
@inject NotificationService NotificationService

<h3>Статистика</h3>


<RadzenSelectBar @bind-Value=@filterDate TValue="FilterDateEnum" class="mb-5" Change=@OnChange>
    <Items>
        @foreach (var filter in filterDates)
        {
            <RadzenSelectBarItem Text="@(((FilterDateEnum)filter).ToString())" Value="@filter"/>
        }
    </Items>
</RadzenSelectBar>

@if (filterDate == FilterDateEnum.Кастом)
{
    <RadzenDatePicker @bind-Value=@startFilterDate
                  DateFormat="dd/MM/yyyy" Name="DatePicker" Placeholder="Начало" Change="ChangeDateAsync" />
    <RadzenDatePicker @bind-Value=@endFilterDate
                  DateFormat="dd/MM/yyyy" Name="DatePicker" Change="ChangeDateAsync" Placeholder="Конец"/>
}

<div class="row">
    <div class="col-sm-12 col-lg-6">
        <RadzenChart>
            <RadzenPieSeries Data="@piieChart" Title="Процент" CategoryProperty="Product" ValueProperty="Percent">
                <RadzenSeriesDataLabels Visible="@showDataLabels" />
            </RadzenPieSeries>
        </RadzenChart>
    </div>
</div>

@code {
    FilterDateEnum filterDate;
    IEnumerable<FilterDateEnum> filterDates = Enum.GetValues(typeof(FilterDateEnum)).Cast<FilterDateEnum>();
    DateTime startFilterDate;
    DateTime endFilterDate;
    List<Order> orders = new();
    Dictionary<string, int> pieDict = new();
    List<PieChartViewModel> pieChartView = new();
    PieChartViewModel[] piieChart;
    bool showDataLabels = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            orders = await orderService.GetAllAsync();
            CalculatePercents();
        }
        catch (Exception exception)
        {
            NotificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Error, Summary = "Something went wrong!", Detail = exception.Message });
        }
    }

    private async Task ChangeDateAsync()
    {
        try
        {
            orders = await orderService.GetAllByDatesAsync(startFilterDate.Date, endFilterDate.Date);
            CalculatePercents();
        }
        catch (Exception exception)
        {
            NotificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Error, Summary = "Something went wrong!", Detail = exception.Message });
        }
    }

    void OnChange(FilterDateEnum filterDate)
    {
        Console.WriteLine((int)filterDate);
    }

    private void CalculatePercents()
    {
        var cheaters = orders.GroupBy(p => p.Product);

        foreach(var c in cheaters)
        {
            PieChartViewModel pieItem = new();
            pieItem.Product = c.Key.ToString();
            pieItem.Count = c.Count();
            pieChartView.Add(pieItem);

            pieDict.Add(c.Key.ToString(), c.Count());
        }

        int total = pieDict.Sum(v => v.Value);

        foreach(var item in pieChartView)
        {
            var percent = (double)(100 * item.Count) / total;
            item.Percent = double.Parse(string.Format("{0:00.00}", percent));
        }

        piieChart = pieChartView.ToArray();
        pieChartView.Clear();
        pieDict.Clear();
    }
}
