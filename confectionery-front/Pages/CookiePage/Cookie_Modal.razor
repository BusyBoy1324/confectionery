@inject NotificationService NotificationService

@inject ICookieService _cookieService
<RadzenTemplateForm Data="_name">
	<RadzenFieldset Text="Форма Печенья">
		<RadzenStack Gap="1rem">
			<RadzenRow AlignItems="AlignItems.Center">
				<RadzenColumn Size="12" SizeMD="4">
					<RadzenLabel Text="Название" Component="Название" />
				</RadzenColumn>
				<RadzenColumn Size="12" SizeMD="8">
					<RadzenTextBox Style="width: 100%;" Name="Name" @bind-value="_name" Disabled="Mode == ModalEnum.Delete" />
				</RadzenColumn>
			</RadzenRow>
		</RadzenStack>
	</RadzenFieldset>
	@if (Mode == ModalEnum.Create || Mode == ModalEnum.Update)
	{
		<RadzenButton ButtonType="ButtonType.Submit" Size="ButtonSize.Medium" Icon="save" Text="Сохранить" Style="margin-top: 15px;" Click="SaveElement " />
	}
	else if (Mode == ModalEnum.Delete)
	{
		<RadzenButton ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Danger" Size="ButtonSize.Medium" Icon="delete" Text="Удалить" Style="margin-top: 15px;" Click="DeleteElement" />
	}
	<RadzenButton Size="ButtonSize.Medium" Icon="cancel" Text="Отменить" Style="margin-top: 15px;" Click="CancelAsync" ButtonStyle="ButtonStyle.Light" />
</RadzenTemplateForm>

@code {
	[CascadingParameter] public IModalService Modal { get; set; }

	[CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }

	[Parameter] public Guid Id { get; set; }
	[Parameter] public ModalEnum Mode { get; set; }

	string _name;

	protected override async Task OnInitializedAsync()
	{
		if (Mode == ModalEnum.Create)
		{
			_name = "Новое печенье";
		}
		else if ((Mode == ModalEnum.Update) || (Mode == ModalEnum.Delete))
		{
			Cookie cookie = new();
			try
			{
				cookie = await _cookieService.GetByIdAsync(Id);
			}
			catch (Exception ex)
			{
				NotificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Error, Summary = "Something bad happened :(", Detail = ex.Message });
			}
			_name = cookie.Name;
		}

		await InvokeAsync(StateHasChanged);
		await base.OnInitializedAsync();
	}

	private async Task SaveElement()
	{
		if (string.IsNullOrEmpty(_name))
		{
			var msg = new NotificationMessage { Severity = NotificationSeverity.Warning, Summary = "Error!", Detail = "Name is required!", Duration = 2000 };
			NotificationService.Notify(msg);
			return;
		}

		if (Mode == ModalEnum.Create)
		{
			var newCookie = new CookieDto()
				{
					Name = _name,
				};

			try
			{
				await _cookieService.CreateAsync(newCookie);
			}
			catch (Exception ex)
			{
				NotificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Error, Summary = "Something bad happened :(", Detail = ex.Message });
			}
		}
		else if (Mode == ModalEnum.Update)
		{
			Cookie cookie = new();
			cookie.Id = Id;
			cookie.Name = _name;

			try
			{
				await _cookieService.UpdateAsync(cookie);
			}
			catch (Exception ex)
			{
				NotificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Error, Summary = "Something bad happened :(", Detail = ex.Message });
			}
		}

		await ModalInstance.CloseAsync(ModalResult.Ok<bool>(true));
	}

	private async Task DeleteElement()
	{
		try
		{
			await _cookieService.DeleteAsync(Id);
		}
		catch (Exception ex)
		{
			NotificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Error, Summary = "Something bad happened :(", Detail = ex.Message });
		}

		await ModalInstance.CloseAsync(ModalResult.Ok<bool>(true));
	}

	private async Task CancelAsync()
	{
		await ModalInstance.CancelAsync();
	}
}
